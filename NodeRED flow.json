[
    {
        "id": "537be9f0963afc9f",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6a4f7b0fe9c005c7",
        "type": "mqtt-broker",
        "name": "",
        "broker": "af131d05d32a4261a4b276030065628f.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "fece872844c5e5ba",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "Device certificate.crt",
        "keyname": "private.key",
        "caname": "AmazonRootCA1.pem",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "d8b516d7f3a5c402",
        "type": "mqtt-broker",
        "name": "AWS_IoT",
        "broker": "aabvq6qknodah-ats.iot.ap-southeast-2.amazonaws.com",
        "port": "8883",
        "tls": "fece872844c5e5ba",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "74703ee39279a722",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#ff0505",
                "baseFont": "Arial,Arial,Helvetica,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#ff0505",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#ff0505",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#ff5151",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#ff0505",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "Arial,Arial,Helvetica,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "true",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "080ebeb0fa03a556",
        "type": "ui_group",
        "name": "Admin Button",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "2",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1a5a9ac65f0b5c79",
        "type": "mqtt-broker",
        "name": "AWS_Frankfurt_adi",
        "broker": "a3ftokgzypbb6l-ats.iot.eu-central-1.amazonaws.com",
        "port": "8883",
        "tls": "fece872844c5e5ba",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f2c37f8d.9ee15",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "4e61ac6483f77472",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d20710cc2178e308",
        "type": "ui_group",
        "name": "Button",
        "tab": "4e61ac6483f77472",
        "order": 1,
        "disp": true,
        "width": "3",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8238741273eac031",
        "type": "ui_spacer",
        "z": "537be9f0963afc9f",
        "name": "spacer",
        "group": "080ebeb0fa03a556",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "3932d7cc824e7ed9",
        "type": "mqtt out",
        "z": "537be9f0963afc9f",
        "name": "MQTTsub_sensor",
        "topic": "admin/force",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "6a4f7b0fe9c005c7",
        "x": 1110,
        "y": 320,
        "wires": []
    },
    {
        "id": "b1a283c9c806177b",
        "type": "debug",
        "z": "537be9f0963afc9f",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 360,
        "wires": []
    },
    {
        "id": "530afedf8a7dcdb2",
        "type": "mqtt in",
        "z": "537be9f0963afc9f",
        "name": "MQTTsub_sensor",
        "topic": "data/parking",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "6a4f7b0fe9c005c7",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 360,
        "wires": [
            [
                "acd586c1c9d0cfe3"
            ]
        ]
    },
    {
        "id": "d122adf2998bc7fa",
        "type": "mqtt out",
        "z": "537be9f0963afc9f",
        "name": "MQTTpub_aws",
        "topic": "data/parking",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1a5a9ac65f0b5c79",
        "x": 1100,
        "y": 380,
        "wires": []
    },
    {
        "id": "cb05eb320c2fc77a",
        "type": "debug",
        "z": "537be9f0963afc9f",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 440,
        "wires": []
    },
    {
        "id": "acd586c1c9d0cfe3",
        "type": "function",
        "z": "537be9f0963afc9f",
        "name": "Set Var",
        "func": "// Extract spot and status fields from the JSON payload\nconst spot = parseInt(msg.payload.spot);\nconst status = msg.payload.status;\n\n// Define the prefix for flow variables\nconst flowVariablePrefix = 'park';\n\n// Set flow variables based on spot and status\nif (!isNaN(spot) && spot > 0) {\n    const flowVariableName = flowVariablePrefix + spot;\n    const parkStatus = (status === \"free\") ? 0 : 1;\n    flow.set(flowVariableName, parkStatus);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 360,
        "wires": [
            [
                "b1a283c9c806177b"
            ]
        ]
    },
    {
        "id": "fdfe7449fca3d660",
        "type": "function",
        "z": "537be9f0963afc9f",
        "name": "Sum",
        "func": "// Retrieve park values from flow context and calculate their sum\nlet sum = 0;\nconst flowVariablePrefix = 'park';\nconst maxParks = 10; // Set the maximum number of parks as needed\n\nfor (let i = 1; i <= maxParks; i++) {\n    const flowVariableName = flowVariablePrefix + i;\n    const parkValue = flow.get(flowVariableName);\n\n    if (parkValue !== undefined) {\n        sum += parkValue;\n    } else {\n        // Exit the loop if the flow variable doesn't exist\n        break;\n    }\n}\n\n// Set the sum as payload of the output message\nmsg.payload = \"{\\\"Capacity\\\":\" + sum + \"}\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "let sum = 0;",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 440,
        "wires": [
            [
                "cb05eb320c2fc77a",
                "d122adf2998bc7fa"
            ]
        ]
    },
    {
        "id": "ae8bfd7e3ce2c537",
        "type": "inject",
        "z": "537be9f0963afc9f",
        "name": "Interval 5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 710,
        "y": 440,
        "wires": [
            [
                "fdfe7449fca3d660"
            ]
        ]
    },
    {
        "id": "b5b026c68db08481",
        "type": "function",
        "z": "537be9f0963afc9f",
        "name": "Fake",
        "func": "// Retrieve park values from flow context and calculate their sum\nlet sum = 0;\nconst flowVariablePrefix = 'park';\nconst maxParks = 10; // Set the maximum number of parks as needed\n\nfor (let i = 1; i <= maxParks; i++) {\n    const flowVariableName = flowVariablePrefix + i;\n    const parkValue = flow.get(flowVariableName);\n\n    if (parkValue !== undefined) {\n        sum += 1;\n    } else {\n        // Exit the loop if the flow variable doesn't exist\n        break;\n    }\n}\n\n// Set the sum as payload of the output message\nmsg.payload = \"{\\\"Capacity\\\":\" + sum + \"}\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "let sum = 0;",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 380,
        "wires": [
            [
                "d122adf2998bc7fa",
                "cb05eb320c2fc77a"
            ]
        ]
    },
    {
        "id": "629b123d1c094a36",
        "type": "ui_button",
        "z": "537be9f0963afc9f",
        "name": "",
        "group": "d20710cc2178e308",
        "order": 1,
        "width": "3",
        "height": "3",
        "passthru": false,
        "label": "ADMIN",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "666",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 680,
        "y": 280,
        "wires": [
            [
                "3932d7cc824e7ed9",
                "b5b026c68db08481"
            ]
        ]
    }
]